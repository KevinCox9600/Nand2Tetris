// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // REGISTERS
    ARegister(in=toA, load=writeA, out[0..14]=addressM, out=outA);
    DRegister(in=ALUOut, load=writeD, out=outD);

    // MUXS
    // input to A register
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=toA);
    // Address or Memory selector
    And(a=instruction[12], b=instruction[15], out=selAOrM);
    Mux16(a=outA, b=inM, sel=selAOrM, out=AOrM);

    // ALU
    ALU(x=outD, y=AOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    // Program Counter
    PC(in=outA, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);

    // Modify op-code
    Not(in=instruction[15], out=isACommand);

    // DESTINATION BITS
    // Write to A register if A or (C and d1) = (A or d1)
    Or(a=isACommand, b=instruction[5], out=writeA);
    // Write to D register if C and d2
    And(a=instruction[15], b=instruction[4], out=writeD);
    // Write to M register if C and d3
    And(a=instruction[15], b=instruction[3], out=writeM);

    // JUMP BITS FOR PC LOAD
    // j_n is 1 iff C instruction and jump bit is 1
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);
    // Compare ALU output and jump conditions
    And(a=ng, b=j1, out=negJump);
    And(a=zr, b=j2, out=zeroJump);
    Or(a=ng, b=zr, out=notPos); // for pos jump
    Not(in=notPos, out=pos);
    And(a=pos, b=j3, out=posJump);
    // Jump if any of negJump, zeroJump, or posJump
    Or(a=zeroJump, b=posJump, out=nonNegJump);
    Or(a=negJump, b=nonNegJump, out=shouldJump);
}
