// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // if most significant bit of address is 0, store to RAM16K
    DMux(in=load, sel=address[14], a=loadRAM, b=loadS);
    // loadScreen is loadS unless address = true
    Mux(a=false, b=loadS, sel=shouldNotUseKeyboard, out=loadScreen);
    // if it is all 1 (address + 1 is false), output screen
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=out16K);
    Screen(in=in, address=address[0..12], load=loadScreen, out=outScreen);
    Keyboard(out=outKeyboard);
    Mux16(a=out16K, b=outScreen, sel=address[14], out=outNormal);
    Mux16(a=outKeyboard, b=outNormal, sel=shouldNotUseKeyboard, out=out);

    // Check if keyboard address is loaded
    // (adding address and complement should be one, so Or16Way the Not of that)
    Not16(in[15]=false, in[0..14]=address, out=notAddress);
    Add16(a[15]=false, a[13..14]=true, a[0..12]=false, b=notAddress, out=trueIfKeyboard);
    Not16(in=trueIfKeyboard, out[0..7]=falseIfKeyboard1, out[8..15]=falseIfKeyboard2);
    Or8Way(in=falseIfKeyboard1, out=f1);
    Or8Way(in=falseIfKeyboard2, out=f2);
    Or(a=f1, b=f2, out=shouldNotUseKeyboard);
}
